{"entries":[{"timestamp":1728590081849,"editorVersion":"7.0.42","changes":[{"type":"edited","filename":"main.blocks","patch":[{"diffs":[[0,"http"],[-1,"s"],[0,"://"],[-1,"developers.google.com/blockly/xml\"><variables></variables>"],[1,"www.w3.org/1999/xhtml\">\n  "],[0,"<blo"]],"start1":12,"start2":12,"length1":70,"length2":37},{"diffs":[[0,"art\""],[-1," x=\"0\" y=\"0\""],[0,"></b"]],"start1":67,"start2":67,"length1":20,"length2":8},{"diffs":[[0,"</block>"],[1,"\n  "],[0,"<block t"]],"start1":72,"start2":72,"length1":16,"length2":19},{"diffs":[[0,"ver\""],[-1," x=\"205\" y=\"0\""],[0,"></b"]],"start1":107,"start2":107,"length1":22,"length2":8},{"diffs":[[0,"</block>"],[1,"\n"],[0,"</xml>"]],"start1":112,"start2":112,"length1":14,"length2":15}]},{"type":"edited","filename":"main.ts","patch":[{"diffs":[[-1,"basic.forever(function () {\n\t\n})"],[0,"\n"]],"start1":0,"start2":0,"length1":33,"length2":1}]},{"type":"edited","filename":"pxt.json","patch":[{"diffs":[[0,".md\""],[-1,",\n        \"Trueclicklife.ts\"\n    ],\n    \"preferredEditor\": \"tsprj\""],[1,"\n    ],\n    \"additionalFilePaths\": []"],[0,"\n}\n"]],"start1":222,"start2":222,"length1":73,"length2":44}]},{"type":"added","filename":"Trueclicklife.ts","value":"enum PingUnit {\n    //% block=\"μs\"\n    MicroSeconds,\n    //% block=\"cm\"\n    Centimeters,\n    //% block=\"inches\"\n    Inches\n}\n\n//% weight=10 color=#0fbc11 icon=\"\\uf1b9\" groups='[\"Basic_Sensor\",\"Motor & time\",\"Motor On\",\"Ultrasonic Sensor\",\"Tracking Sensor\", \"Advance\"]'\nnamespace Trueclicklife {\n\n    //% block=\"value of light: %ligs\"\n    //% group=\"Basic_Sensor\"\n    //% weight=7\n    export function lightsensor(ligs: AnalogPin) {\n        return pins.analogReadPin(ligs)\n    }\n\n    //% block=\"value of soil: %sois\"\n    //% group=\"Basic_Sensor\"\n    //% weight=6\n    export function soilsensor(sois: AnalogPin) {\n        return pins.analogReadPin(sois)\n    }\n\n    //% block=\"value of raindrop: %rais\"\n    //% group=\"Basic_Sensor\"\n    //% weight=5\n    export function rainsensor(rais: AnalogPin) {\n        return pins.analogReadPin(rais)\n    }\n\n    //% block=\"value of Infrared(IR): %is\"\n    //% group=\"Basic_Sensor\"\n    //% weight=4\n    export function irsensor(irs: AnalogPin) {\n        return pins.analogReadPin(irs)\n    }\n\n    //% block=\"value of water level: %wats\"\n    //% group=\"Basic_Sensor\"\n    //% weight=3\n    export function watersensor(wats: AnalogPin) {\n        return pins.analogReadPin(wats)\n    }\n\n    export enum DHT11Type {\n        //% block=\"temperature(℃)\" enumval=0\n        DHT11_temperature_C,\n\n        //% block=\"temperature(℉)\" enumval=1\n        DHT11_temperature_F,\n\n        //% block=\"humidity(0~100)\" enumval=2\n        DHT11_humidity,\n    }\n\n    let dht11Humidity = 0\n    let dht11Temperature = 0\n\n    /**\n     * get dht11 temperature and humidity Value\n     * @param dht11pin describe parameter here, eg: DigitalPin.P15\n     */\n    //% group=\"Basic_Sensor\"\n    //% weight=2\n    //% blockId=\"readdht11\" block=\"value of dht11: %dht11type| at pin %dht11pin\"\n    export function dht11value(dht11type: DHT11Type, dht11pin: DigitalPin): number {\n        const DHT11_TIMEOUT = 100\n        const buffer = pins.createBuffer(40)\n        const data = [0, 0, 0, 0, 0]\n        let startTime = control.micros()\n\n        if (control.hardwareVersion().slice(0, 1) !== '1') { // V2\n            // TODO: V2 bug\n            pins.digitalReadPin(DigitalPin.P0);\n            pins.digitalReadPin(DigitalPin.P1);\n            pins.digitalReadPin(DigitalPin.P2);\n            pins.digitalReadPin(DigitalPin.P3);\n            pins.digitalReadPin(DigitalPin.P4);\n            pins.digitalReadPin(DigitalPin.P10);\n\n            // 1.start signal\n            pins.digitalWritePin(dht11pin, 0)\n            basic.pause(18)\n\n            // 2.pull up and wait 40us\n            pins.setPull(dht11pin, PinPullMode.PullUp)\n            pins.digitalReadPin(dht11pin)\n            control.waitMicros(40)\n\n            // 3.read data\n            startTime = control.micros()\n            while (pins.digitalReadPin(dht11pin) === 0) {\n                if (control.micros() - startTime > DHT11_TIMEOUT) break\n            }\n            startTime = control.micros()\n            while (pins.digitalReadPin(dht11pin) === 1) {\n                if (control.micros() - startTime > DHT11_TIMEOUT) break\n            }\n\n            for (let dataBits = 0; dataBits < 40; dataBits++) {\n                startTime = control.micros()\n                while (pins.digitalReadPin(dht11pin) === 1) {\n                    if (control.micros() - startTime > DHT11_TIMEOUT) break\n                }\n                startTime = control.micros()\n                while (pins.digitalReadPin(dht11pin) === 0) {\n                    if (control.micros() - startTime > DHT11_TIMEOUT) break\n                }\n                control.waitMicros(28)\n                if (pins.digitalReadPin(dht11pin) === 1) {\n                    buffer[dataBits] = 1\n                }\n            }\n        } else { // V1\n            // 1.start signal\n            pins.digitalWritePin(dht11pin, 0)\n            basic.pause(18)\n\n            // 2.pull up and wait 40us\n            pins.setPull(dht11pin, PinPullMode.PullUp)\n            pins.digitalReadPin(dht11pin)\n            control.waitMicros(40)\n\n            // 3.read data\n            if (pins.digitalReadPin(dht11pin) === 0) {\n                while (pins.digitalReadPin(dht11pin) === 0);\n                while (pins.digitalReadPin(dht11pin) === 1);\n\n                for (let dataBits = 0; dataBits < 40; dataBits++) {\n                    while (pins.digitalReadPin(dht11pin) === 1);\n                    while (pins.digitalReadPin(dht11pin) === 0);\n                    control.waitMicros(28)\n                    if (pins.digitalReadPin(dht11pin) === 1) {\n                        buffer[dataBits] = 1\n                    }\n                }\n            }\n        }\n\n        for (let i = 0; i < 5; i++) {\n            for (let j = 0; j < 8; j++) {\n                if (buffer[8 * i + j] === 1) {\n                    data[i] += 2 ** (7 - j)\n                }\n            }\n        }\n\n        if (((data[0] + data[1] + data[2] + data[3]) & 0xff) === data[4]) {\n            dht11Humidity = data[0] + data[1] * 0.1\n            dht11Temperature = data[2] + data[3] * 0.1\n        }\n\n        switch (dht11type) {\n            case DHT11Type.DHT11_temperature_C:\n                return dht11Temperature\n            case DHT11Type.DHT11_temperature_F:\n                return (dht11Temperature * 1.8) + 32\n            case DHT11Type.DHT11_humidity:\n                return dht11Humidity\n        }\n    }\n\n\n\n\n    //% block=\"Forward Speed: %value time: %number \\\\sec\"\n    //% value.min=0 value.max=100\n    //% subcategory=SmartCar_Motor weight=9\n    export function forwardfor(value: number, time: number) {\n        pins.analogWritePin(AnalogPin.P13, value * 10.2)\n        pins.analogWritePin(AnalogPin.P14, 0)\n        pins.analogWritePin(AnalogPin.P15, value * 10.2)\n        pins.analogWritePin(AnalogPin.P16, 0)\n        basic.pause(time * 1000)\n        pins.analogWritePin(AnalogPin.P13, 0)\n        pins.analogWritePin(AnalogPin.P14, 0)\n        pins.analogWritePin(AnalogPin.P15, 0)\n        pins.analogWritePin(AnalogPin.P16, 0)\n\n    }\n\n    //% block=\"Back Speed: %value time: %number sec\"\n    //% value.min=0 value.max=100\n    //% subcategory=SmartCar_Motor weight=8\n    export function backfor(value: number, time: number) {\n        pins.analogWritePin(AnalogPin.P13, 0)\n        pins.analogWritePin(AnalogPin.P14, value * 10.2)\n        pins.analogWritePin(AnalogPin.P15, 0)\n        pins.analogWritePin(AnalogPin.P16, value * 10.2)\n        basic.pause(time * 1000)\n        pins.analogWritePin(AnalogPin.P13, 0)\n        pins.analogWritePin(AnalogPin.P14, 0)\n        pins.analogWritePin(AnalogPin.P15, 0)\n        pins.analogWritePin(AnalogPin.P16, 0)\n\n    }\n\n\n\n    //% block=\"Turn Left Speed: %value time: %number sec\"\n    //% value.min=0 value.max=100\n    //% subcategory=SmartCar_Motor weight=7\n    export function turnleftfor(value: number, time: number) {\n        pins.analogWritePin(AnalogPin.P13, 0)\n        pins.analogWritePin(AnalogPin.P14, 0)\n        pins.analogWritePin(AnalogPin.P15, value * 10.2)\n        pins.analogWritePin(AnalogPin.P16, 0)\n        basic.pause(time * 1000)\n        pins.analogWritePin(AnalogPin.P13, 0)\n        pins.analogWritePin(AnalogPin.P14, 0)\n        pins.analogWritePin(AnalogPin.P15, 0)\n        pins.analogWritePin(AnalogPin.P16, 0)\n\n    }\n\n    //% block=\"Turn Right Speed: %value time: %number sec\"\n    //% value.min=0 value.max=100\n    //% subcategory=SmartCar_Motor weight=6\n    export function turnrightfor(value: number, time: number) {\n        pins.analogWritePin(AnalogPin.P13, value * 10.2)\n        pins.analogWritePin(AnalogPin.P14, 0)\n        pins.analogWritePin(AnalogPin.P15, 0)\n        pins.analogWritePin(AnalogPin.P16, 0)\n        basic.pause(time * 1000)\n        pins.analogWritePin(AnalogPin.P13, 0)\n        pins.analogWritePin(AnalogPin.P14, 0)\n        pins.analogWritePin(AnalogPin.P15, 0)\n        pins.analogWritePin(AnalogPin.P16, 0)\n\n    }\n\n    //% block=\"Forward|Speed: %value\"\n    //% value.min=0 value.max=100\n    //% subcategory=SmartCar_Motor weight=5\n    export function forward(value: number) {\n        pins.analogWritePin(AnalogPin.P13, value * 10.2)\n        pins.analogWritePin(AnalogPin.P14, 0)\n        pins.analogWritePin(AnalogPin.P15, value * 10.2)\n        pins.analogWritePin(AnalogPin.P16, 0)\n    }\n\n    //% block=\"Back|Speed: %value\"\n    //% value.min=0 value.max=100\n    //% subcategory=SmartCar_Motor weight=4\n    export function back(value: number) {\n        pins.analogWritePin(AnalogPin.P13, 0)\n        pins.analogWritePin(AnalogPin.P14, value * 10.2)\n        pins.analogWritePin(AnalogPin.P15, 0)\n        pins.analogWritePin(AnalogPin.P16, value * 10.2)\n    }\n\n    //% block=\"Turn Left|Speed: %value\"\n    //% value.min=0 value.max=100\n    //% subcategory=SmartCar_Motor weight=3\n    export function turnleft(value: number) {\n        pins.analogWritePin(AnalogPin.P13, 0)\n        pins.analogWritePin(AnalogPin.P14, 0)\n        pins.analogWritePin(AnalogPin.P15, value * 10.2)\n        pins.analogWritePin(AnalogPin.P16, 0)\n    }\n\n    //% block=\"Turn Right|Speed: %value\"\n    //% value.min=0 value.max=100\n    //% subcategory=SmartCar_Motor weight=2\n    export function turnright(value: number) {\n        pins.analogWritePin(AnalogPin.P13, value * 10.2)\n        pins.analogWritePin(AnalogPin.P14, 0)\n        pins.analogWritePin(AnalogPin.P15, 0)\n        pins.analogWritePin(AnalogPin.P16, 0)\n    }\n\n    //% block=\"Stop\"\n    //% subcategory=SmartCar_Motor weight=1\n    export function stop() {\n        pins.analogWritePin(AnalogPin.P13, 0)\n        pins.analogWritePin(AnalogPin.P14, 0)\n        pins.analogWritePin(AnalogPin.P15, 0)\n        pins.analogWritePin(AnalogPin.P16, 0)\n    }\n\n    //% block=\"ping trig %trig|echo %echo|unit %unit\"\n    //% group=\"Basic_Sensor\"\n    //% weight=1\n    export function ping(trig: DigitalPin, echo: DigitalPin, unit: PingUnit, maxCmDistance = 500): number {\n        // send pulse\n        pins.setPull(trig, PinPullMode.PullNone);\n        pins.digitalWritePin(trig, 0);\n        control.waitMicros(2);\n        pins.digitalWritePin(trig, 1);\n        control.waitMicros(10);\n        pins.digitalWritePin(trig, 0);\n\n        // read pulse\n        const d = pins.pulseIn(echo, PulseValue.High, maxCmDistance * 58);\n\n        switch (unit) {\n            case PingUnit.Centimeters: return Math.idiv(d, 58);\n            case PingUnit.Inches: return Math.idiv(d, 148);\n            default: return d;\n        }\n    }\n\n    //% block=\"Left sensor: %ls\"\n    //% subcategory=SmartCar_Track weight=2\n    export function leftsensor(ls: AnalogPin) {\n        return pins.analogReadPin(ls)\n    }\n\n    //% block=\"Right sensor: %rs\"\n    //% subcategory=SmartCar_Track weight=1\n    export function rightsensor(rs: AnalogPin) {\n        return pins.analogReadPin(rs)\n    }\n\n\n    //% block=\"Forward M1|Speed: %motor1 M2|Speed: %motor2\"\n    //% motor1.min=0 motor1.max=100\n    //% motor2.min=0 motor2.max=100\n    //% subcategory=SmartCar_Avd weight=8\n    export function forwardadvance(motor1: number, motor2: number) {\n        pins.analogWritePin(AnalogPin.P13, motor1 * 10.2)\n        pins.analogWritePin(AnalogPin.P14, 0)\n        pins.analogWritePin(AnalogPin.P15, motor2 * 10.2)\n        pins.analogWritePin(AnalogPin.P16, 0)\n    }\n\n    //% block=\"Back M1|Speed: %motor1 M2|Speed: %motor2\"\n    //% motor1.min=0 motor1.max=100\n    //% motor2.min=0 motor2.max=100\n    //% subcategory=SmartCar_Avd weight=7\n    export function backadvance(motor1: number, motor2: number) {\n        pins.analogWritePin(AnalogPin.P13, 0)\n        pins.analogWritePin(AnalogPin.P14, motor1 * 10.2)\n        pins.analogWritePin(AnalogPin.P15, 0)\n        pins.analogWritePin(AnalogPin.P16, motor2 * 10.2)\n    }\n\n    //% block=\"Spin Left|Speed: %value\"\n    //% value.min=0 value.max=100\n    //% subcategory=SmartCar_Avd weight=6\n    export function spinleft(value: number) {\n        pins.analogWritePin(AnalogPin.P13, 0)\n        pins.analogWritePin(AnalogPin.P14, value * 10.2)\n        pins.analogWritePin(AnalogPin.P15, value * 10.2)\n        pins.analogWritePin(AnalogPin.P16, 0)\n    }\n\n    //% block=\"Spin Right|Speed: %value\"\n    //% value.min=0 value.max=100\n    //% subcategory=SmartCar_Avd weight=5\n    export function spinright(value: number) {\n        pins.analogWritePin(AnalogPin.P13, value * 10.2)\n        pins.analogWritePin(AnalogPin.P14, 0)\n        pins.analogWritePin(AnalogPin.P15, 0)\n        pins.analogWritePin(AnalogPin.P16, value * 10.2)\n    }\n\n    //% block=\"Forward M1|Speed: %motor1 M2|Speed: %motor2 time: %number sec\"\n    //% motor1.min=0 motor1.max=100\n    //% motor2.min=0 motor2.max=100\n    //% subcategory=SmartCar_Avd weight=4\n    export function forwardforadvance(motor1: number, motor2: number, time: number) {\n        pins.analogWritePin(AnalogPin.P13, motor1 * 10.2)\n        pins.analogWritePin(AnalogPin.P14, 0)\n        pins.analogWritePin(AnalogPin.P15, motor2 * 10.2)\n        pins.analogWritePin(AnalogPin.P16, 0)\n        basic.pause(time * 1000)\n        pins.analogWritePin(AnalogPin.P13, 0)\n        pins.analogWritePin(AnalogPin.P14, 0)\n        pins.analogWritePin(AnalogPin.P15, 0)\n        pins.analogWritePin(AnalogPin.P16, 0)\n    }\n\n\n\n    //% block=\"Back M1|Speed: %motor1 M2|Speed: %motor2 time: %number sec\"\n    //% motor1.min=0 motor1.max=100\n    //% motor2.min=0 motor2.max=100\n    //% subcategory=SmartCar_Avd weight=3\n    export function backforadvance(motor1: number, motor2: number, time: number) {\n        pins.analogWritePin(AnalogPin.P13, 0)\n        pins.analogWritePin(AnalogPin.P14, motor1 * 10.2)\n        pins.analogWritePin(AnalogPin.P15, 0)\n        pins.analogWritePin(AnalogPin.P16, motor2 * 10.2)\n        basic.pause(time * 1000)\n        pins.analogWritePin(AnalogPin.P13, 0)\n        pins.analogWritePin(AnalogPin.P14, 0)\n        pins.analogWritePin(AnalogPin.P15, 0)\n        pins.analogWritePin(AnalogPin.P16, 0)\n\n    }\n\n\n    //% block=\"Spin Left Speed: %value time: %number sec\"\n    //% value.min=0 value.max=100\n    //% subcategory=SmartCar_Avd weight=2\n    export function spinleftfor(value: number, time: number) {\n        pins.analogWritePin(AnalogPin.P13, 0)\n        pins.analogWritePin(AnalogPin.P14, value * 10.2)\n        pins.analogWritePin(AnalogPin.P15, value * 10.2)\n        pins.analogWritePin(AnalogPin.P16, 0)\n        basic.pause(time * 1000)\n        pins.analogWritePin(AnalogPin.P13, 0)\n        pins.analogWritePin(AnalogPin.P14, 0)\n        pins.analogWritePin(AnalogPin.P15, 0)\n        pins.analogWritePin(AnalogPin.P16, 0)\n\n    }\n\n\n\n    //% block=\"Spin Right Speed: %value time: %number sec\"\n    //% value.min=0 value.max=100\n    //% subcategory=SmartCar_Avd weight=1\n    export function spinrightfor(value: number, time: number) {\n        pins.analogWritePin(AnalogPin.P13, value * 10.2)\n        pins.analogWritePin(AnalogPin.P14, 0)\n        pins.analogWritePin(AnalogPin.P15, 0)\n        pins.analogWritePin(AnalogPin.P16, value * 10.2)\n        basic.pause(time * 1000)\n        pins.analogWritePin(AnalogPin.P13, 0)\n        pins.analogWritePin(AnalogPin.P14, 0)\n        pins.analogWritePin(AnalogPin.P15, 0)\n        pins.analogWritePin(AnalogPin.P16, 0)\n\n    }\n\n\n}\n"}]},{"timestamp":1728590666880,"editorVersion":"7.0.42","changes":[{"type":"edited","filename":"main.blocks","patch":[{"diffs":[[0,"art\""],[-1," id=\"HhY*m?Vmsp9MGVXh35Ca\""],[0," x=\""]],"start1":100,"start2":100,"length1":34,"length2":8},{"diffs":[[0,"ver\""],[-1," id=\"1.cV#reHtTp8{AaFep[o\""],[0," x=\""]],"start1":149,"start2":149,"length1":34,"length2":8}]},{"type":"edited","filename":"pxt.json","patch":[{"diffs":[[0," ],\n"],[-1,"    \"testFiles\": [\n        \"test.ts\"\n    ],\n"],[0,"    "]],"start1":258,"start2":258,"length1":52,"length2":8}]},{"type":"added","filename":"test.ts","value":"// tests go here; this will not be compiled when this package is used as an extension.\n"}]}],"snapshots":[{"timestamp":1728590081848,"editorVersion":"7.0.42","text":{"main.blocks":"<xml xmlns=\"http://www.w3.org/1999/xhtml\">\n  <block type=\"pxt-on-start\"></block>\n  <block type=\"device_forever\"></block>\n</xml>","main.ts":"\n","README.md":"","pxt.json":"{\n    \"name\": \"extensionV5\",\n    \"description\": \"\",\n    \"dependencies\": {\n        \"core\": \"*\",\n        \"radio\": \"*\",\n        \"microphone\": \"*\"\n    },\n    \"files\": [\n        \"main.blocks\",\n        \"main.ts\",\n        \"README.md\"\n    ],\n    \"additionalFilePaths\": []\n}\n"}}],"shares":[],"lastSaveTime":1728590718362}